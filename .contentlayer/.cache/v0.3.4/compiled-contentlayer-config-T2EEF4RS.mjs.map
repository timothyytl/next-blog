{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { makeSource, defineDocumentType } from 'contentlayer/source-files'\nimport readingTime from 'reading-time'\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings'\nimport rehypePrettyCode from 'rehype-pretty-code'\nimport rehypeSlug from 'rehype-slug'\nimport remarkGfm from 'remark-gfm'\nimport GithubSlugger from 'github-slugger'\n\nconst Blog = defineDocumentType(() => ({\n    name: 'Blog',\n    filePathPattern: '**/**/*.mdx',\n    contentType: \"mdx\",\n    fields: {\n        title: {\n            type: 'string',\n            required: true,\n        },\n        publishedAt: {\n            type: 'date',\n            required: true,\n        },\n        updatedAt: {\n            type: 'date',\n            required: true,\n        },\n        description: {\n            type: 'string',\n            required: true,\n        },\n        image: {\n            type: 'image',\n        },\n        isPublished: {\n            type: 'boolean',\n            default: true,\n        },\n        author: {\n            type: 'string',\n            required: true,\n        },\n        tags: {\n            type: 'list',\n            of: { type: 'string' },\n        },\n    },\n    computedFields: {\n        url: {\n            type: 'string',\n            resolve: (doc) => `/blogs/${doc._raw.flattenedPath}`,\n        },\n        readingTime: {\n            type: \"json\",\n            resolve: (doc) => readingTime(doc.body.raw)\n        },\n        toc: {\n            type: \"json\",\n            resolve: async (doc) => {\n                const regularExp = /\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\n                const slugger = new GithubSlugger()\n                // \"/\" marks the beginning of the expression and \"/n\" (to match a new line)\n                // \"()\" is the named capturing group named <flag> where it matches the \"#\" character between 1 and 6 characters {1,6}\n                // the other flag is also another name capturing group called <content> where the DOT matches any character except the new line and \"+\" specifies that there should be at least 1 or more characters\n                // in between this name capturing groups is \"\\s\" which matches 1 or more white space characters\n                const headings = Array.from(doc.body.raw.matchAll(regularExp)).map(({ groups }) => {\n                    const flag = groups?.flag\n                    const content = groups?.content\n\n                    return {\n                        level: flag?.length == 1 ? \"one\" : flag?.length == 2 ? \"two\" : \"three\",\n                        text: content,\n                        slug: content ? slugger.slug(content) : undefined\n                    }\n\n                })\n                return headings\n            }\n        },\n    }\n}))\n\nconst codeOptions = {\n    theme: 'monokai'\n}\n\nexport default makeSource({\n    /* options */\n    contentDirPath: 'content',\n    documentTypes: [Blog],\n    mdx: { remarkPlugins: [remarkGfm], rehypePlugins: [rehypeSlug, [rehypeAutolinkHeadings, { behavior: \"append\" }], [rehypePrettyCode, codeOptions]] }\n})"],
  "mappings": ";AAAA,SAAS,YAAY,0BAA0B;AAC/C,OAAO,iBAAiB;AACxB,OAAO,4BAA4B;AACnC,OAAO,sBAAsB;AAC7B,OAAO,gBAAgB;AACvB,OAAO,eAAe;AACtB,OAAO,mBAAmB;AAE1B,IAAM,OAAO,mBAAmB,OAAO;AAAA,EACnC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACJ,OAAO;AAAA,MACH,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,aAAa;AAAA,MACT,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,WAAW;AAAA,MACP,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,aAAa;AAAA,MACT,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,OAAO;AAAA,MACH,MAAM;AAAA,IACV;AAAA,IACA,aAAa;AAAA,MACT,MAAM;AAAA,MACN,SAAS;AAAA,IACb;AAAA,IACA,QAAQ;AAAA,MACJ,MAAM;AAAA,MACN,UAAU;AAAA,IACd;AAAA,IACA,MAAM;AAAA,MACF,MAAM;AAAA,MACN,IAAI,EAAE,MAAM,SAAS;AAAA,IACzB;AAAA,EACJ;AAAA,EACA,gBAAgB;AAAA,IACZ,KAAK;AAAA,MACD,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,UAAU,IAAI,KAAK,aAAa;AAAA,IACtD;AAAA,IACA,aAAa;AAAA,MACT,MAAM;AAAA,MACN,SAAS,CAAC,QAAQ,YAAY,IAAI,KAAK,GAAG;AAAA,IAC9C;AAAA,IACA,KAAK;AAAA,MACD,MAAM;AAAA,MACN,SAAS,OAAO,QAAQ;AACpB,cAAM,aAAa;AACnB,cAAM,UAAU,IAAI,cAAc;AAKlC,cAAM,WAAW,MAAM,KAAK,IAAI,KAAK,IAAI,SAAS,UAAU,CAAC,EAAE,IAAI,CAAC,EAAE,OAAO,MAAM;AAC/E,gBAAM,OAAO,QAAQ;AACrB,gBAAM,UAAU,QAAQ;AAExB,iBAAO;AAAA,YACH,OAAO,MAAM,UAAU,IAAI,QAAQ,MAAM,UAAU,IAAI,QAAQ;AAAA,YAC/D,MAAM;AAAA,YACN,MAAM,UAAU,QAAQ,KAAK,OAAO,IAAI;AAAA,UAC5C;AAAA,QAEJ,CAAC;AACD,eAAO;AAAA,MACX;AAAA,IACJ;AAAA,EACJ;AACJ,EAAE;AAEF,IAAM,cAAc;AAAA,EAChB,OAAO;AACX;AAEA,IAAO,8BAAQ,WAAW;AAAA;AAAA,EAEtB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK,EAAE,eAAe,CAAC,SAAS,GAAG,eAAe,CAAC,YAAY,CAAC,wBAAwB,EAAE,UAAU,SAAS,CAAC,GAAG,CAAC,kBAAkB,WAAW,CAAC,EAAE;AACtJ,CAAC;",
  "names": []
}
